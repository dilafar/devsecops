variables:
  #IMAGE_NAME: fadhiljr/demo-app
  #IMAGE_TAG: juice-shop-1.1
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID
  IMAGE_NAME: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/juice-shop
  SERVER_IP: 35.180.68.120
  SERVER_USER: ubuntu

stages:
  - test 
  - build 
  - cache
  - upload-reports
  - deploy

create_cache:
  image: node:18-bullseye
  stage: cache 
  script:
    - yarn install
  cache:
    key:
      files:
        - yarn.lock 
    paths:
      - node_modules/
      - yarn.lock 
      - .yarn 
    policy: pull-push

gitleaks:
  stage: test 
  image: 
    name: zricethezav/gitleaks
    entrypoint: [""]
  script: 
    - gitleaks detect --verbose --source . -f json -r gitleaks.json
  allow_failure: true
  artifacts:
    when: always
    paths:
      - gitleaks.json

yarn_test:
  image: node:18-bullseye
  stage: test 
  script:
    - yarn install
    - yarn test 

njsscan:
  stage: test 
  image: python 
  before_script:
    - pip3 install --upgrade njsscan
  script: 
    - njsscan --exit-warning . --sarif -o njsscan.sarif
  allow_failure: true
  artifacts:
    when: always
    paths:
      - njsscan.sarif

semgrep:
  stage: test
  image: returntocorp/semgrep
  variables:
    SEMGREP_RULES: p/javascript
  script: 
    - semgrep ci --json --output semgrep.json 
  allow_failure: true
  artifacts:
    when: always
    paths:
      - semgrep.json 

retire: 
  stage: test 
  image: node:18-bullseye
  cache:
    key:
      files:
        - yarn.lock 
    paths:
      - node_modules/
      - yarn.lock 
      - .yarn 
    policy: pull
  before_script: 
    - npm install -g retire 
  script: 
    - retire --path . --outputformat json --outputpath retire.json
  artifacts:
    when: always
    paths:
      - retire.json 

build_image:
  stage: build
  image: docker:24
  services:
    - docker:24-dind
  #variables:
  #  DOCKER_PASS: test123
  #  DOCKER_USER: fadhiljr
  before_script:
    - apk --no-cache add python3 py3-pip
    - pip3 install --no-cache-dir awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  #  - echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
  script:
    #- docker build -t $IMAGE_NAME:$IMAGE_TAG .
    #- docker push $IMAGE_NAME:$IMAGE_TAG
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA 
    - docker push $IMAGE_NAME:latest 

trivy:
  stage: build
  needs: ["build_image"]
  image: docker:24
  services:
    - docker:24-dind
  before_script:  
    - apk --no-cache add python3 py3-pip
    - pip3 install --no-cache-dir awscli
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.18.3
    - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  script: 
    - docker pull $IMAGE_NAME:$CI_COMMIT_SHA 
    - trivy image -f json -o trivy.json --severity HIGH,CRITICAL --exit-code 1 $IMAGE_NAME:$CI_COMMIT_SHA 
  allow_failure: true
  artifacts:
    when: always
    paths:
      - trivy.json 

upload_reports:
  stage: upload-reports
  image: python 
  when: always
  before_script: 
    - pip3 install requests
  script: 
    - python3 upload-reports.py gitleaks.json
    - python3 upload-reports.py njsscan.sarif
    - python3 upload-reports.py semgrep.json
    - python3 upload-reports.py retire.json 
    - python3 upload-reports.py trivy.json 

deploy_image:
  stage: deploy
  image: debian:bullseye-slim
  before_script:
    - apt update -y && apt install openssh-client -y 
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh 
    - chmod 700 ~/.ssh
  script:  
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $IMAGE_NAME:latest" 
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop juice-shop || true && docker rm juice-shop || true" 
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest" 
